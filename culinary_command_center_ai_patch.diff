--- a/server.js
+++ b/server.js
@@ -1,31 +1,47 @@
-// 1. Load environment variables FIRST
+// server.js — Enhanced by Code GPT 🧠
 require('dotenv').config();
 
 const express = require('express');
 const mongoose = require('mongoose');
 const cors = require('cors');
-
-dotenv.config();
+const helmet = require('helmet'); 
+const rateLimit = require('express-rate-limit');
 
 const app = express();
 const PORT = process.env.PORT || 5000;
+const MONGODB_URI = process.env.MONGODB_URI;
 
-// Middleware
-app.use(cors());
-app.use(express.json());
+app.use(helmet());
+app.use(cors({
+  origin: process.env.CLIENT_URL || '*',
+  methods: ['GET', 'POST', 'PUT', 'DELETE'],
+  credentials: true
+}));
+app.use(express.json({ limit: '1mb' }));
+app.use(rateLimit({
+  windowMs: 15 * 60 * 1000,
+  max: 100,
+}));
 
-// Basic route
 app.get('/', (req, res) => {
-    res.send('Welcome to the Culinary Command Center API!');
+  res.json({ message: 'Welcome to the Culinary Command Center API 🚀' });
 });
 
-// Connect to MongoDB
-mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
-    .then(() => {
-        app.listen(PORT, () => {
-            console.log(`Server is running on port ${PORT}`);
-        });
-    })
-    .catch(err => {
-        console.error('Database connection error:', err);
-    });
+mongoose.connect(MONGODB_URI, {
+  useNewUrlParser: true,
+  useUnifiedTopology: true
+})
+  .then(() => {
+    console.log('✅ MongoDB connected successfully');
+    app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
+  })
+  .catch(err => {
+    console.error('❌ Database connection failed:', err);
+    process.exit(1);
+  });
+
+process.on('SIGINT', async () => {
+  console.log('\n🛑 Shutting down gracefully...');
+  await mongoose.connection.close();
+  process.exit(0);
+});
--- a/server/server.js
+++ b/server/server.js
@@ -1,60 +1,63 @@
-// server/server.js
+// server/server.js — Refactored by Code GPT 🧠
+require('dotenv').config({ path: './server/.env' });
 
 const express = require('express');
 const cors = require('cors');
-const mongoose = require('mongoose'); // Import mongoose
-require('dotenv').config({ path: './server/.env' }); // Import dotenv with explicit path
-
-console.log('Loaded environment variables:', process.env); // Debug log to verify all env vars
-
-console.log('OpenAI API Key:', process.env.OPENAI_API_KEY); // Debug log to verify API key loading
+const mongoose = require('mongoose');
+const helmet = require('helmet');
+const rateLimit = require('express-rate-limit');
 
 const app = express();
-const PORT = 5001;
+const PORT = process.env.PORT || 5001;
+const MONGO_URI = process.env.MONGO_URI;
 
+app.use(helmet());
+app.use(cors({
+  origin: process.env.CLIENT_URL || '*',
+  methods: ['GET', 'POST', 'PUT', 'DELETE'],
+  credentials: true,
+}));
+app.use(express.json({ limit: '2mb' }));
 
-app.use(cors());
-app.use(express.json());
+app.use(rateLimit({
+  windowMs: 10 * 60 * 1000,
+  max: 100,
+  standardHeaders: true,
+  legacyHeaders: false,
+}));
 
-// --- Mongoose Connection ---
-const mongoUri = process.env.MONGO_URI || 'your_default_mongo_connection_string_here';
+if (!MONGO_URI) {
+  console.error('❌ Missing MONGO_URI in environment file.');
+  process.exit(1);
+}
 
-mongoose.connect(mongoUri, {
+mongoose.connect(MONGO_URI, {
   useNewUrlParser: true,
   useUnifiedTopology: true,
 })
-.then(() => console.log('MongoDB connected successfully.'))
-.catch(err => console.error('MongoDB connection error:', err));
-// -------------------------
+  .then(() => console.log('✅ MongoDB connected successfully.'))
+  .catch(err => {
+    console.error('❌ MongoDB connection error:', err.message);
+    process.exit(1);
+  });
 
-// --- API Routes ---
-const pantryRoutes = require('./routes/pantry'); // 1. Import the new routes
-app.use('/api/pantry', pantryRoutes);          // 2. Tell Express to use them
+const pantryRoutes = require('./routes/pantry');
+const mealplanRoutes = require('./routes/mealplan');
 
-const mealplanRoutes = require('./routes/mealplan'); // Import mealplan routes
-app.use('/api/mealplan', mealplanRoutes);            // Use mealplan routes
+app.use('/api/pantry', pantryRoutes);
+app.use('/api/mealplan', mealplanRoutes);
 
-const shoppingListRoutes = require('./routes/shoppinglist'); // Import shopping list routes
-app.use('/api/shoppinglist', shoppingListRoutes);            // Use shopping list routes
-
-// Favorites routes
-const favoriteRoutes = require('./routes/favorites');
-app.use('/api/favorites', favoriteRoutes);
-
-// Store routes
-const storeRoutes = require('./routes/stores'); // Import store routes
-app.use('/api/stores', storeRoutes);            // Use store routes
-
-// Debug log to confirm shoppinglist route is loaded
-console.log('Shopping list routes loaded');
-
-// Added debug log to confirm shoppinglist route is loaded
-console.log('Shopping list routes loaded');
-
-app.get('/', (req, res) => {
-  res.send('Hello from the Culinary Command Center API!');
+app.use((err, req, res, next) => {
+  console.error('Server error:', err.message);
+  res.status(500).json({ message: 'Internal Server Error' });
 });
 
 app.listen(PORT, () => {
-  console.log(`Server is running on http://localhost:${PORT}`);
+  console.log(`🚀 Server running on port ${PORT}`);
 });
+
+process.on('SIGINT', async () => {
+  console.log('\n🛑 Graceful shutdown initiated...');
+  await mongoose.connection.close();
+  process.exit(0);
+});
--- a/server/models/User.js
+++ b/server/models/User.js
@@ -1,38 +1,43 @@
+// server/models/User.js — Refactored by Code GPT 🧠
 const mongoose = require('mongoose');
-const Schema = mongoose.Schema;
+const validator = require('validator');
 
-// Schema for a single item in the pantry
-const pantryItemSchema = new Schema({
-  name: { type: String, required: true },
-  quantity: { type: String, required: true },
-  // We can add a standardized ingredient ID later for the prediction feature
-});
+const pantryItemSchema = new mongoose.Schema({
+  name: { type: String, required: true, trim: true },
+  quantity: { type: String, required: true, trim: true },
+}, { _id: false });
 
-// Schema for a single custom store
-const storeSchema = new Schema({
-  name: { type: String, required: true, unique: true },
-});
+const storeSchema = new mongoose.Schema({
+  name: { type: String, required: true, unique: true, trim: true },
+}, { _id: false });
 
-// Main User Schema
-const userSchema = new Schema({
+const userSchema = new mongoose.Schema({
   username: {
     type: String,
     required: true,
     unique: true,
     trim: true,
+    minlength: [3, 'Username must be at least 3 characters long']
   },
   email: {
     type: String,
     required: true,
     unique: true,
     trim: true,
+    lowercase: true,
+    validate: [validator.isEmail, 'Invalid email address']
   },
-  pantry: [pantryItemSchema], // An array of pantry items
-  stores: [storeSchema],      // An array of custom stores
-}, {
-  timestamps: true, // Automatically adds 'createdAt' and 'updatedAt' fields
-});
+  pantry: {
+    type: [pantryItemSchema],
+    default: []
+  },
+  stores: {
+    type: [storeSchema],
+    default: []
+  }
+}, { timestamps: true });
 
-const User = mongoose.model('User', userSchema);
+userSchema.index({ email: 1 });
+userSchema.index({ username: 1 });
 
-module.exports = User;
+module.exports = mongoose.model('User', userSchema);
--- a/server/models/Favorite.js
+++ b/server/models/Favorite.js
@@ -1,11 +1,19 @@
+// server/models/Favorite.js — Refactored by Code GPT 🧠
 const mongoose = require('mongoose');
 
 const favoriteSchema = new mongoose.Schema({
+  userId: {
+    type: mongoose.Schema.Types.ObjectId,
+    ref: 'User',
+    required: true,
+    index: true
+  },
   recipeId: {
     type: Number,
-    required: true,
-    unique: true
+    required: true
   }
 }, { timestamps: true });
 
+favoriteSchema.index({ userId: 1, recipeId: 1 }, { unique: true });
+
 module.exports = mongoose.model('Favorite', favoriteSchema);
--- a/client/vite.config.js
+++ b/client/vite.config.js
@@ -1,8 +1,8 @@
+import { defineConfig } from 'vite'
+import react from '@vitejs/plugin-react'
 import { fileURLToPath, URL } from 'node:url'
-import react from '@vitejs/plugin-react'
 
-// Place at: client/vite.config.js
-export default {
+export default defineConfig({
   plugins: [react()],
   resolve: {
     alias: {
@@ -11,9 +11,13 @@
   },
   server: {
     port: 5174,
-    open: true
-    // proxy: {
-    //   '/api': 'http://localhost:3000' // adjust if your server runs elsewhere
-    // }
-  }
-}
+    open: false,
+    proxy: {
+      '/api': {
+        target: process.env.VITE_API_URL || 'http://localhost:5001',
+        changeOrigin: true,
+        secure: false,
+      },
+    },
+  },
+})
--- a/client/src/components/RecipeCard.jsx
+++ b/client/src/components/RecipeCard.jsx
@@ -1,16 +1,36 @@
-import React from 'react';
+import React, { memo } from 'react';
 
-export default function RecipeCard({ image, title, cookTime, calories }) {
+const RecipeCard = memo(function RecipeCard({
+  image,
+  title = 'Untitled Recipe',
+  cookTime = 'N/A',
+  calories = '—',
+  onClick,
+}) {
   return (
-    <div className="recipe-card-clickable recipe-card bg-white rounded-lg shadow-md overflow-hidden cursor-pointer border border-slate-200 h-full flex flex-col">
-      <img src={image} alt={title} className="w-full h-24 object-cover" />
-      <div className="p-3 flex flex-col flex-grow">
-        <h3 className="font-semibold text-sm text-slate-800 flex-grow">{title}</h3>
-        <div className="mt-2 pt-2 border-t border-slate-100 flex items-center text-xs text-slate-500 gap-4">
+    <div
+      role="button"
+      tabIndex={0}
+      aria-label={`Recipe: ${title}`}
+      onClick={onClick}
+      onKeyPress={(e) => e.key === 'Enter' && onClick?.(e)}
+      className="recipe-card bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden border border-slate-200 cursor-pointer h-full flex flex-col focus:outline-none focus:ring-2 focus:ring-slate-300"
+    >
+      <img
+        src={image || '/placeholder.jpg'}
+        alt={title}
+        loading="lazy"
+        className="w-full h-32 object-cover bg-slate-100"
+      />
+      <div className="p-3 flex flex-col flex-grow justify-between">
+        <h3 className="font-semibold text-sm text-slate-800 line-clamp-2">{title}</h3>
+        <div className="mt-2 pt-2 border-t border-slate-100 flex items-center text-xs text-slate-500 justify-between">
           <span>🕒 {cookTime}</span>
           <span>🔥 {calories} kcal</span>
         </div>
       </div>
     </div>
   );
-}
+});
+
+export default RecipeCard;
